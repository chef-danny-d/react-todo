{"version":3,"sources":["components/TodoItem.js","components/Todos.js","components/layout/Header.js","components/AddTodo.js","components/pages/About.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","getStyle","textDecoration","_this","props","todo","completed","textDecorationColor","_this$props$todo","this","id","title","react_default","a","createElement","className","style","type","onChange","markComplete","bind","onClick","delTodo","Component","Todos","todos","map","components_TodoItem","key","Header","react_router_dom","to","AddTodo","_Component","_getPrototypeOf2","Object","classCallCheck","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","state","onSubmit","e","preventDefault","addTodo","setState","defineProperty","target","name","value","inherits","createClass","placeholder","About","Fragment","App","listTitle","console","log","axios","delete","then","res","toConsumableArray","filter","listName","x","post","complete","data","_this2","get","_this3","layout_Header","react_router","exact","path","render","components_AddTodo","components_Todos","component","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.62fcc35c.chunk.js","sourcesContent":["//used emmet 'rcc' command to generate file\n\nimport React, {Component} from 'react';\nimport PropTypes from 'prop-types';\n\nclass TodoItem extends Component {\n    getStyle = () => {\n        return{\n            textDecoration: this.props.todo.completed ? 'line-through' : 'none',\n            textDecorationColor: this.props.todo.completed ? '#000' : 'none'\n        }\n    };\n\n    render() {\n        const { id, title } = this.props.todo;\n        return (\n            <div className=\"task\" > {/*calling method getStyle for dynamic styling*/}\n                <div className=\"task--group\" style={this.getStyle()}>\n                    {/*event listener to make the checkbox change data based on markComplete method*/}\n                    <input type=\"checkbox\" className=\"task--input\" onChange={this.props.markComplete.bind(this, id)}/>\n                    {/*using the property of the object todo to get the data*/}\n                    <li className=\"task--item\">{title}</li>\n                </div>\n                <button className=\"task--button sr-only material-icons\" onClick={this.props.delTodo.bind(this, id)}>\n                    delete\n                </button>\n            </div>\n        );\n    }\n}\n\n//Defining prop types\nTodoItem.propTypes = {\n    todos: PropTypes.object.isRequired,\n    markComplete: PropTypes.func.isRequired,\n    delTodo: PropTypes.func.isRequired\n};\n\n\nexport default TodoItem;","import React, {Component} from 'react';\nimport TodoItem from './TodoItem';\nimport PropTypes from 'prop-types';\n\nclass Todos extends Component{\n    render() {\n        return this.props.todos.map((todo) => ( //we are using .map as a loop to run through our array of items\n            //using the object todo to get the data of each one from the array\n            //passing todo as a property\n            <TodoItem key={todo.id} todo={todo} markComplete={this.props.markComplete} delTodo={this.props.delTodo}/>\n        ))\n    }\n}\n\n//Defining prop types\nTodos.propTypes = {\n    todos: PropTypes.array.isRequired,\n    markComplete: PropTypes.func.isRequired,\n    delTodo: PropTypes.func.isRequired\n};\n\nexport default Todos;\n","import React, {Component} from 'react';\nimport { Link } from 'react-router-dom';\n\nfunction Header() {\n    return(\n        <header>\n            <nav className=\"nav\">\n                <ul className=\"nav--list\">\n                    <li className=\"nav--item\">\n                        {/*<a className=\"nav--link\" href=\"\">Home</a>*/}\n                        <Link className=\"nav--link\" to=\"/\">Home</Link>\n                    </li>\n                    <li className=\"nav--item\">\n                        {/*<a className=\"nav--link\" href=\"\">About</a>*/}\n                        <Link className=\"nav--link\" to=\"/about\">About</Link>\n                    </li>\n                </ul>\n            </nav>\n        </header>\n    )\n}\n\nexport default Header;","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\n\nexport class AddTodo extends Component {\n    state = {\n        title: ''\n    };\n\n    onSubmit = (e) => {\n        e.preventDefault();\n        this.props.addTodo(this.state.title);\n        this.setState({title: ''});\n    }\n\n    onChange = (e) => this.setState({[e.target.name]: e.target.value});\n\n    render() {\n        return (\n            <form className=\"form\" onSubmit={this.onSubmit}>\n                <input className=\"form--input\" type=\"text\" name=\"title\" placeholder=\"Add Todo...\" value={this.state.title} onChange={this.onChange}/>\n                <button className=\"form--button form--button__submit\" type=\"submit\" value=\"submit\">Submit</button>\n            </form>\n        );\n    }\n}\n\n//Defining prop types\nAddTodo.propTypes = {\n    addTodo: PropTypes.func.isRequired\n};\n\nexport default AddTodo;","import React from 'react';\n\nfunction About() {\n    return (\n        <React.Fragment>\n            <h1>About</h1>\n            <p>This is a ToDo list app, version 1.0.0 that is part of a crash course.</p>\n        </React.Fragment>\n    );\n}\n\nexport default About;","import React, {Component} from 'react';\nimport { BrowserRouter as Router, Route} from 'react-router-dom';\nimport Todos from './components/Todos';\nimport './App.css';\nimport Header from './components/layout/Header';\nimport AddTodo from './components/AddTodo';\nimport About from './components/pages/About';\n// import uuid from 'uuid';\nimport axios from 'axios';\n\nclass App extends Component{\n    state = {\n        todos: [],\n        listTitle: ''\n    };\n\n    componentDidMount() {\n        axios.get('https://jsonplaceholder.typicode.com/todos')\n            .then(res => this.setState({todos: res.data}))\n    }\n\n    //this method toggles todos complete\n    markComplete = (id) => {\n        this.setState({ todos: this.state.todos.map(todo => {\n            if (todo.id === id){\n                //setting it dynamic using opposite variable state setting using not true\n                todo.completed = !todo.completed\n                if (todo.completed){\n                    console.log(\"item with unique ID of: \" + id + \" is set to complete\")\n                }\n                else{\n                    console.log(\"item with unique ID of: \" + id + \" is set to incomplete\")\n                }\n\n            }\n            return todo;\n            })})\n    };\n\n    //this method deletes the todo\n    delTodo = (id) => {\naxios.delete(`https://jsonplaceholder.typicode.com/todos/&{id}`)\n    .then(res => this.setState({todos: [...this.state.todos.filter(todo => todo.id !== id)]}))\n      console.log(id);\n    };\n\n    //list naming\n    listName = (x) => this.setState({[x.target.name]: x.target.value});\n\n    //add todo\n    addTodo = (title) => {\n        console.log(title);\n        //using spread operator to duplicate array item\n        axios.post('https://jsonplaceholder.typicode.com/todos', {\n            title,\n            complete: false\n        })\n            .then(res => this.setState({todos: [...this.state.todos, res.data]}))\n    }\n\n    render() {\n        return(\n            <Router>\n                <div className=\"wrapper\">\n                    <Header />\n                    <Route exact path=\"/\" render={props => ( // 'exact' acts as a default page indicator\n                        <React.Fragment> {/*bringing in shadow element to wrap react tags up*/}\n                            <div className=\"wrapper--title\">\n                                <input type=\"text\" name=\"listTitle\" className=\"wrapper--input\" placeholder=\"To-Do List\" value={this.state.listTitle} onChange={this.listName}/>\n                                <i className=\"material-icons wrapper--icon\">edit</i>\n                            </div>\n                            <AddTodo addTodo={this.addTodo}/>\n                            <Todos todos={this.state.todos} markComplete={this.markComplete} delTodo={this.delTodo}/>\n                        </React.Fragment>\n                    )}/>\n                    <Route path=\"/about\" component={About}/>\n\n                </div>\n            </Router>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}